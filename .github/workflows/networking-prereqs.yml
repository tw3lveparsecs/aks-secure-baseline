name: Networking-PreReqs

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
    paths:
    - poc/armtemplates/LogAnalytics/*
    - poc/armtemplates/StorageAccount/*
    - poc/armtemplates/Firewall/*
    - poc/armtemplates/NetworkWatcher/*
    - poc/armtemplates/Nsgs/*
    - poc/armtemplates/RouteTable/*
    - poc/armtemplates/Vnet/*
    - poc/armtemplates/VNetPeering/*
    - .github/variables/networkingprereqs.env
    - .github/workflows/networking-prereqs.yml
  push:
    branches:
    - poc
    paths:
    - poc/armtemplates/LogAnalytics/*
    - poc/armtemplates/StorageAccount/*
    - poc/armtemplates/Firewall/*
    - poc/armtemplates/NetworkWatcher/*
    - poc/armtemplates/Nsgs/*
    - poc/armtemplates/RouteTable/*
    - poc/armtemplates/Vnet/*
    - poc/armtemplates/VNetPeering/*
    - .github/variables/networkingprereqs.env
    - .github/workflows/networking-prereqs.yml

jobs:
  test:
    if: ${{ contains(github.ref, 'refs/pull/') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/Firewall/azuredeploy.json

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/NetworkWatcher/azuredeploy.json

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/Nsgs/azuredeploy.json

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/RouteTable/azuredeploy.json

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/Vnet/azuredeploy.json

    - name: Test ARM template
      uses: ./.github/actions/armttk
      with:
        templateFile: poc/armtemplates/VNetPeering/azuredeploy.json

  build:
    if: ${{ github.ref == 'refs/heads/poc' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: drop
        path: |
          ./.github/actions/setvars
          ./.github/variables
          poc/armtemplates/LogAnalytics/*
          poc/armtemplates/StorageAccount/*
          poc/armtemplates/Firewall/*
          poc/armtemplates/NetworkWatcher/*
          poc/armtemplates/Nsgs/*
          poc/armtemplates/RouteTable/*
          poc/armtemplates/Vnet/*
          poc/armtemplates/VNetPeering/*
        if-no-files-found: error

  deploy:
    if: ${{ github.ref == 'refs/heads/poc' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop

      - name: Configure Environment Variables
        uses: ./drop/.github/actions/setvars
        with:
          varFilePath: ./drop/.github/variables/*

      - name: Login to Azure
        uses: azure/login@v1.1
        with:
          creds: ${{ secrets[env.SECRET] }}
          #enable-AzPSSession: true

      - name: Deploy Diagnostic Storage Account
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az group create --name ${{ env.DIAGSTORAGERESOURCEGROUP }} --location ${{ env.LOCATION }}
            az deployment group create \
              --resource-group ${{ env.DIAGSTORAGERESOURCEGROUP }} \
              --template-file drop/poc/armtemplates/StorageAccount/azuredeploy.json \
              --parameters drop/poc/armtemplates/StorageAccount/azuredeploy.parameters.json \
              --parameters \
                storageName=${{ env.DIAGSTORAGEACCOUNT }} \
                accountType=${{ env.DIAGSTORAGETYPE }} \
                accessTier=${{ env.DIAGSTORAGETIER }} \
                kind=${{ env.DIAGSTORAGEKIND }} \
                softDeleteRetentionDays=${{ env.DIAGSTORAGERETENTION }}

      - name: Deploy Log Analytics
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.LARESOURCEGROUP }} \
              --template-file drop/poc/armtemplates/LogAnalyticsWorkspace/azuredeploy.json \
              --parameters drop/poc/armtemplates/LogAnalyticsWorkspace/azuredeploy.parameters.json \
              --parameters \
                workspaceName=${{ env.LAWORKSPACENAME }} \
                sku=${{ env.LASKU }} \
                dataRetention=${{ env.LADATARETENTION }} \
                diagnosticStorageAccountName=${{ env.DIAGSTORAGEACCOUNT }} \
                diagnosticStorageAccountResourceGroup=${{ env.DIAGSTORAGERESOURCEGROUP }}

      # - name: Deploy Network Watcher
      #   uses: Azure/cli@v1.0.0
      #   with:
      #     inlineScript: |
      #       az group create --name ${{ env.NETWORKRESOURCEGROUP }} --location ${{ env.LOCATION }}
      #       az deployment group create \
      #         --resource-group ${{ env.NETWORKRESOURCEGROUP }} \
      #         --template-file drop/poc/armtemplates/NetworkWatcher/azuredeploy.json \
      #         --parameters drop/poc/armtemplates/NetworkWatcher/azuredeploy.parameters.json \
      #         --parameters \
      #           location=${{ env.LOCATION }} \
      #           networkWatcherName=${{ env.NETWORKWATCHERNAME }}

      - name: Deploy Nsg - Bastion
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.NETWORKRESOURCEGROUP }} \
              --template-file drop/poc/armtemplates/NetworkWatcher/azuredeploy.json \
              --parameters drop/poc/armtemplates/NetworkWatcher/shd-bastion.parameters.json \
              --parameters \
                networkWatcherResourceGroup=${{ env.NETWORKRESOURCEGROUP }} \
                diagnosticStorageAccountName=${{ env.DIAGSTORAGEACCOUNT }} \
                diagnosticStorageAccountResourceGroup=${{ env.DIAGSTORAGERESOURCEGROUP }} \
                logAnalyticsWorkspaceName=${{ env.LAWORKSPACENAME }} \
                logAnalyticsSubscriptionID=${{ env.LAWORKSPACESUBID }} \
                logAnalyticsResourceGroup=${{ env.LARESOURCEGROUP }}

      - name: Deploy Nsg - CoreServices
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.NETWORKRESOURCEGROUP }} \
              --template-file drop/poc/armtemplates/NetworkWatcher/azuredeploy.json \
              --parameters drop/poc/armtemplates/NetworkWatcher/shd-coreservices.parameters.json \
              --parameters \
                networkWatcherResourceGroup=${{ env.NETWORKRESOURCEGROUP }} \
                diagnosticStorageAccountName=${{ env.DIAGSTORAGEACCOUNT }} \
                diagnosticStorageAccountResourceGroup=${{ env.DIAGSTORAGERESOURCEGROUP }} \
                logAnalyticsWorkspaceName=${{ env.LAWORKSPACENAME }} \
                logAnalyticsSubscriptionID=${{ env.LAWORKSPACESUBID }} \
                logAnalyticsResourceGroup=${{ env.LARESOURCEGROUP }}
                
      - name: Deploy Nsg - AzureDevOps
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.NETWORKRESOURCEGROUP }} \
              --template-file drop/poc/armtemplates/NetworkWatcher/azuredeploy.json \
              --parameters drop/poc/armtemplates/NetworkWatcher/shd-devops.parameters.json \
              --parameters \
                networkWatcherResourceGroup=${{ env.NETWORKRESOURCEGROUP }} \
                diagnosticStorageAccountName=${{ env.DIAGSTORAGEACCOUNT }} \
                diagnosticStorageAccountResourceGroup=${{ env.DIAGSTORAGERESOURCEGROUP }} \
                logAnalyticsWorkspaceName=${{ env.LAWORKSPACENAME }} \
                logAnalyticsSubscriptionID=${{ env.LAWORKSPACESUBID }} \
                logAnalyticsResourceGroup=${{ env.LARESOURCEGROUP }}                